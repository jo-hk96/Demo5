spring.application.name=Demo5


# JPA가 엔티티 기반으로 스키마 생성
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# (선택) Oracle 방언 명시 — Hibernate 6 기준
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect

# SQL 초기화: schema.sql / data.sql 실행 (Spring Boot 3는 기본적으로 Hibernate 이후 data.sql 실행)
spring.sql.init.mode=always
spring.sql.init.encoding=utf-8

# (혼선 방지) JPA 이후 data.sql 실행을 확실히 하려면
spring.jpa.defer-datasource-initialization=true

# Datasource
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=test
spring.datasource.password=1234

server.servlet.context-path=/
server.port=8080

#세션 정보 저장장소 정하기 jdbc : DB
spring.session.store-type=jdbc

#Spring이 세션 정보를 데이터베이스에 저장할 때
#필요한 테이블(스키마)을 자동으로 만들어줄지 설정하는 옵션
spring.session.jdbc.initialize-schema=always

# 로깅: 실행 SQL + 바인딩 파라미터
logging.level.org.hibernate.SQL=DEBUG
# Hibernate 6 (Spring Boot 3) 에서 바인딩 값 로거는 아래가 표준
logging.level.org.hibernate.orm.jdbc.bind=TRACE

# (선택) DB에서 읽어온 값 추적
logging.level.org.hibernate.orm.jdbc.extract=TRACE

# 스프링 시큐리티 디버그(선택)
logging.level.org.springframework.security=DEBUG


